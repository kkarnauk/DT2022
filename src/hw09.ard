\import Algebra.Meta
\import Data.List
\import Function.Meta
\import Meta
\import Order.LinearOrder
\import Paths
\import Paths.Meta
\import Utils (Maybe, just, maybe, nothing)
\import lect05
\import lect06 ()
\import lect07(Decide, no, yes)
\import lect09
\open LinearOrder

-- 1. Закончите определение \instance Monad для Term.
--
\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left {A B : \Set} (a : A) (k : A -> Term B) => unfold idp
  | return-right {A : \Set} (m : Term A) : m >>= return = m \elim m {
    | app m1 m2 => repeat (rewrite return-right) idp
    | lam m => rewrite (liftM-return-idp $ lam m) $ pmap lam $ return-right _
    | var v => idp
    | unit => idp
  }
  | >>=-assoc {A B C : \Set} (m : Term A) (k : A -> Term B) (l : B -> Term C) : (m >>= k) >>= l = m >>= (\lam x => k x >>= l)
    \elim m {
      | app m1 m2 => repeat (rewrite >>=-assoc) idp
      | lam m => rewrite >>=-assoc $ pmap lam $ pmap (m >>=) $ funExt'
                                   $ \lam a => unfold liftM $ cases a \with {
                                        | nothing => idp
                                        | just a => assoc-help k l a
                                      }
      | var v => idp
      | unit => idp
    }

  \where {
    \func liftM-return-idp {A : \Set} (m : Term A) : liftM {A} return = return =>
      unfold liftM $ funExt' $ \lam a => cases a idp

    \func assoc-help {A B C : \Set} (k : A -> Term B) (l : B -> Term C) (a : A)
      : termMap just (k a) >>= maybe (var nothing) (\lam a => termMap just (l a)) = termMap just (k a >>= l)

      => mcases {termMap, 1} \with {
        | app t1 t2 => pmap2 app (assoc-help-app t1 l) (assoc-help-app t2 l)
        | lam t => pmap lam $ unfold liftM {?}
        | var v => idp
        | unit => idp
      }

    \func assoc-help-app {B C : \Set} (t : Term B) (l : B -> Term C)
      : termMap just t >>= maybe (var nothing) (\lam a => termMap just (l a)) = termMap just (t >>= l) \elim t
        | app t1 t2 => pmap2 app (assoc-help-app t1 l) (assoc-help-app t2 l)
        | lam t => pmap lam $ {?}
        | var v => idp
        | unit => idp
  }


-- 2. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} (t s : Term V) : \Type => RedN t s
  \where {
    \data RedN {V : \Set} (t s : Term V)
      | red-n-one (Red1 t s)
      | red-n-step {q : Term V} (step : Red1 t q) (steps : RedN q s)
  }

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | app t1 t2 => cases (checkRedex (app t1 t2)) \with {
    | yes (f, t', eq) => \let (t1-f, t2-t') => idp-app eq \in
                          rewrite (t1-f, t2-t') $ yes (f lect09.TermMonad.>>= maybe t' var, redBeta idp idp)
    | no n => \case strategy t1 \with {
      | yes (t1', r) => yes (app t1' t2, appLeft r idp)
      | no n1 => \case strategy t2 \with {
        | yes (t2', r) => yes (app t1 t2', appRight idp r)
        | no n2 => no $ \lam (s, r) => cases (s, r) \with {
          | x, redBeta {g} p p1 => n (g, t2, rewrite p idp)
          | app x x1, appLeft x2 p => n1 (x, x2)
          | app x x1, appRight p x2 => n2 (x1, x2)
        }
      }
    }
  }
  | lam t => \case strategy t \with {
    | yes (t', r) => yes (lam t', redLam r)
    | no n => no (\lam (s, r) => cases (s, r) \with {
      | lam x, redLam r' => n (x, r')
    })
  }
  | var v => no $ \lam (s, r) => \case r
  | unit => no $ \lam (s, r) => \case r

  \where {
    \func checkRedex {V : \Set } (t : Term V) : Decide (\Sigma (f : Term (Maybe V)) (t' : Term V) (eq : t = app (lam f) t')) \elim t
      | app (lam t) t2 => yes (t, t2, idp)
      | app (app _ _) t2 => no $ (\lam (a, b, c) => \case c)
      | app (var _) t2 => no $ (\lam (a, b, c) => \case c)
      | app unit t2 => no $ (\lam (a, b, c) => \case c)
      | lam t => no $ (\lam (a, b, c) => \case c)
      | var v => no $ (\lam (a, b, c) => \case c)
      | unit => no $ (\lam (a, b, c) => \case c)

    \func idp-app-left {V : \Set} {t1 t2 t1' t2' : Term V} (eq : app t1 t2 = app t1' t2') : t1 = t1'
      => pmap (\lam t => cases t \with {
        | app t3 t4 => t3
        | t => t
      }) eq

    \func idp-app-right {V : \Set} {t1 t2 t1' t2' : Term V} (eq : app t1 t2 = app t1' t2') : t2 = t2'
      => pmap (\lam t => cases t \with {
        | app t3 t4 => t4
        | t => t
      }) eq

    \func idp-app {V : \Set} {t1 t2 t1' t2' : Term V} (eq : app t1 t2 = app t1' t2') : \Sigma (t1 = t1') (t2 = t2')
      => (idp-app-left eq, idp-app-right eq)
  }

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc f => acc $ \lam a' r => appAccLeft $ f (app a' s) $ appLeft r idp

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc f => acc $ \lam a' r => appAccRight $ f (app t a') $ appRight idp r

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc f => acc $ \lam a' r => subLamAcc $ f (lam a') $ redLam r

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  \elim b, B, h
    | unit, Unit, unitType => unfold (>>=) unitType
    | var v, B, varType p => unfold (>>=) $ rewriteI p $ h' v
    | app b1 b2, B, appType {A} h1 h2 => unfold (>>=) (
        \let subst-1 => substLem ctx b1 (Arr A B) h1 ctx' a h' \in
        \let subst-2 => substLem ctx b2 A h2 ctx' a h' \in appType subst-1 subst-2
      )

    | lam t, Arr A B, lamType h =>
      \let h'-sub : \Pi (u : Maybe U) -> hasType (maybe A ctx') (liftM a u) (maybe A ctx u) =>
          \lam u => cases u \with {
            | nothing => unfold liftM $ varType idp
            | just u => unfold liftM $ {?}
          } \in
        \let sub => substLem (maybe A ctx) t B h (maybe A ctx') (liftM a) h'-sub \in lamType sub

    \where {
--      \func aux {U V : \Set} {A : Type} (ctx : U -> Type) (ctx' : V -> Type) (a : U -> Term V)
--                (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u)) (u : U) (res : Term V) (eq : res = a u) (res-type : Type)
--                (eq-type : res-type = ctx u) (prev : hasType ctx' res res-type)
--        : hasType (maybe A ctx') (termMap just res) res-type \elim res, res-type, prev
--
--        | unit, Unit, unitType => unitType
--        | var v, res-type, varType p => varType p
--        | app res1 res2, res-type, appType {A2} prev1 prev2 => cases (a u, eq) \with {
--          | app u1 u2, eq1 =>
--              \let aux-1 => aux {U} {V} {A} ctx ctx' a h' {?} res1 {?} (Arr A2 res-type) {?} prev1 \in
--              \let aux-2 => aux {U} {V} {A} ctx ctx' a h' {?} res2 {?} A2 {?} prev2 \in appType aux-1 aux-2
--        }
----          \let aux-1 => aux {U} {V} {Arr A res-type} ctx ctx' a h' {?} res1 {?} (Arr A2 res-type) {?} prev1 \in {?}
--
--        | lam res, Arr res-type1 res-type2, lamType prev =>
--            \let res-t => aux (maybe res-type1 ctx) (maybe res-type1 ctx') (liftM a) {?} (just u) res {?} res-type2 {?} prev \in {?}
    }

--\func substLem1 {V : \Set} {ctx : V -> Type} {a b : Term V} {x : V} {A B : Type} (hx : hasType ctx (var x) A)
--                (ha : hasType ctx a A)
--                (hb : hasType (\lam v => {?}) b B) : hasType ctx (b >>= ) => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A) : hasType ctx a' A
  \elim a, a', r, A, h
    | unit, _, Red.red-n-one r, Unit, unitType => \case r
    | unit, _, Red.red-n-step {z} step steps, Unit, unitType => \case step
    | var v, _, Red.red-n-one r, A, varType p => \case r
    | var v, _, Red.red-n-step {z} step steps, A, varType p => \case step
    | app a a1, a', Red.red-n-one r, A, h => red1Lem r h
    | app t1 t2, t, Red.red-n-step {z} step steps, A, h => \let step-t => red1Lem step h \in redLem steps step-t
    | lam a, a', Red.red-n-one r, A, h => red1Lem r h
    | lam t, t', Red.red-n-step {z} step steps, A, h => \let step-t => red1Lem step h \in redLem steps step-t

  \where {
    \func red1Lem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A) : hasType ctx a' A
      \elim a, a', r, A, h
        | app t1 t2, a', redBeta {g} eq p1, A1, appType {A2} h1 h2 =>
            \let h1-g => rewrite eq h1 \in cases h1-g \with {
                | lamType x => \let g-t => substLem (maybe A2 ctx) g A1 x ctx (maybe t2 var) (
                    \lam u => cases u \with {
                      | nothing => h2
                      | just a => varType idp
                    }
                  )
                \in rewrite p1 g-t
              }

        | app t1 t2, app t1' t2', appLeft r idp, A, appType h1 h2 =>
            \let h1-t1 => red1Lem r h1 \in appType h1-t1 h2

        | app t1 t2, app t1' t2', appRight idp r, A, appType h1 h2 =>
            \let h2-t2 => red1Lem r h2 \in appType h1 h2-t2

        | lam a, lam a', redLam r, Arr A A1, lamType h => lamType $ red1Lem r h
  }


-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (a t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => headApp (HeadRed a t1 s1) (t2 = s2)
  | app t a', s => headBeta {f : Term (Maybe V)} (a = a') (lam f = t) (f >>= maybe a var = s)

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s) (acc : Acc Red1 a) (q : Interp T s) : Interp T t
  => {?}

-- 8. Докажите typeableInterp из лекции

\func >>=-eq {A B : \Set} : (TermMonad.>>= {A} {B}) = (lect09.TermMonad.>>=) => {?} -- не хочу доказывать, беда определений

\func typeableInterp {U V : \Set} (ctx : U -> Type) (env : U -> Term V)
                     (C : \Pi (u : U) -> Interp (ctx u) (env u)) {t : Term U} {T : Type}
                     (p : hasType ctx t T)
  : Interp T (t >>= env)
  \elim t, T, p
    | unit, Unit, unitType => interpAcc Unit unit (neutralAcc unitNeutral)
    | var v, T, varType p => unfold (>>=) (\let C-v => C v \in \let C-v-p => rewrite p C-v \in C-v-p)
    | app t1 t2, T, appType p1 p2 =>
        \let l => typeableInterp ctx env C p1 \in
        \let r => typeableInterp ctx env C p2 \in unfold (>>=) $ l (t2 >>= env) r

    | lam t, Arr T T1, lamType p => \lam s i => unfold (>>=) (
      \let t-rec => typeableInterp (maybe T ctx) (liftM env) (\lam u => cases u \with {
        | nothing => unfold liftM $ neutralInterp T $ varNeutral
        | just a => unfold liftM $ {?}
      }) p \in \let t-rec => rewrite >>=-eq t-rec \in {?}
    )
