\import Function.Meta
\import Meta
\import Paths.Meta
\import Utils
\import lect12

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int
  | pos 0 => neg 1
  | pos n => pos n
  | neg n => neg (suc n)

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int
  | pos n1, pos n2 => pos (n1 Nat.+ n2)
  | pos 0, neg n => neg n
  | pos (suc n), neg 1 => pos n
  | pos (suc n1), neg (suc n2) => pos n1 + neg n2
  | neg 0, pos n2 => pos n2
  | neg 0, neg n2 => neg n2
  | neg (suc n1), pos 0 => neg (suc n1)
  | neg (suc n1), pos (suc n2) => neg n1 + pos n2
  | neg (suc n1), neg (suc n2) => neg (suc $ suc $ n1 Nat.+ n2)

\func \infixl 7 * (x y : Int) : Int
  | pos n1, pos n2 => pos (n1 Nat.* n2)
  | pos n1, neg n2 => neg (n1 Nat.* n2)
  | neg (suc n1), pos n2 => neg (suc n1 Nat.* n2)
  | neg (suc n1), neg (suc n2) => pos (suc n1 Nat.* suc n2)

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | b-zero
  | b-odd (n : BinNat)
  | b-even (n : BinNat) \with { b-zero => b-zero }

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred =>
  \lam b => cases b \with {
    | 0 => in (0, idp)
    | suc b => in (suc (suc b), idp)
  }

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty => \let (in (_, eq)) => p 0 \in cases eq

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f)
  => \lam c => \let | (in (b, qc)) => q c
                    | (in (a, pb)) => p b
               \in in (a, unfold o $ rewrite pb qc)

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g
  => \lam c => \let (in (a, pc)) => unfold o (p c) \in in (f a, pc)

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\data Set (A : \Set) : \Set

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => (\lam a1 a2 => a1 = a2, \lam x y p => \let py => pmap (\lam f => f y) p \in rewrite py idp)

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => \case (p (image-not-contains f)) \with {
      | in (a, eq) => \let | eq => unfold image-not-contains eq
                           | f-false : Not $ f a a => \lam f-true => rewriteF eq f-true f-true
                           | f-true : f a a => \let eq => pmap (\lam x => x a) eq \in rewrite eq f-false
                      \in f-false f-true
    }
  \where {
    \func image-not-contains {A : \Set} (f : A -> Subs A) : Subs A => \lam a => Not $ f a a
  }


-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
