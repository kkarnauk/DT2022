\import Function.Meta
\import Meta
\import Utils
\import hw01 ()
\import lect05
\import lect06

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair { | fst_ => b | snd_ => a }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => p.p

\func one-isPos : PosNat 1 => \new PosNat {
  | p => ()
}

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record CoprimeNat (x : Nat) (y : Nat) (p : isCoprime x y)
  \where {
    \func isCoprime (x : Nat) (y : Nat) => hw01.gcd x y = 1
  }

\func Comprime60 => CoprimeNat 60

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | left-identity {A B : \Set} (a : A) (h : A -> F B) : (return a >>= h) = h a
  | right-identity {A : \Set} (m : F A) : (m >>= return) = m
  | associativity {A B C : \Set} (m : F A) (g : A -> F B) (h : B -> F C) : (m >>= g >>= h) = (m >>= (\lam x => g x >>= h))
  | fmap f x => x >>= (\lam y => return $ f y)
  | fmap-id x => right-identity x
  | fmap-comp f g x => sym $ associativity x (\lam a => return $ f a) (\lam b => return $ g b) *>
                             pmap (x >>=) (funExt' (\lam a => left-identity (f a) (\lam b => return (g b))))

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe => \new Monad {
  | return => just
  | >>= x f => \case x \with {
    | nothing => nothing
    | just a => f a
  }
  | left-identity a h => idp
  | right-identity m => \case \elim m \with {
    | nothing => idp
    | just a => idp
  }
  | associativity m g h => \case \elim m \with {
    | nothing => idp
    | just a => idp
  }
}

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Set) : Monad (State S)
  | return x => \new State {
    | state s => (s, x)
  }
  | >>= {A} {B} (x : State S A) f => \new State {
    | state s => \case x.state s \with {
      | (s', a) => \let m : State S B => f a \in m.state s'
    }
  }
  | left-identity _ _ => idp
  | right-identity _ => idp
  | associativity _ _ _ => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\func s'run {S A : \Type} (st : State' S A) (s : S) : \Sigma S A \elim st
  | state' st => st s

\instance State'Monad (S : \Set) : Monad (State' S) => \new Monad {
  | return a => state' (\lam s => (s, a))
  | >>= m f => state' $ \lam s => \let (s', a) => s'run m s \in s'run (f a) s'
  | left-identity a h => cases (h a) \with { -- подсмотрел существование cases у другого человека
    | state' _ => idp
  }
  | right-identity m => \case \elim m \with {
    | state' _ => idp
  }
  | associativity m g h => \case \elim m \with {
    | state' _ => idp
  }
}
